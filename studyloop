#!/bin/bash

show_help(){
    help="  NAME
    ba_scan - script to run sim/reco for prtdirc

  SYNOPSIS
    ba_scan [OPTION]

  DESCRIPTION 
     -l 
        level of reco
        0 - run decoding
        1 - run calibration
        
        3 - run sim, lut, reco (default)
        4 - run sim only
        5 - run lut simulation only
        6 - run sim reco only
        7 - run data reco only
        8 - run data-pdf creation
        9 - run reco for sim and data

     -j
        number of threads 
     -s 
        study 
        0 - all 
        # - study id
     -n 
        silent run"
    echo "$help" 
}

OPTIND=1 
while getopts "h?l:j:s:n" opt; do
    case "$opt" in
	h|\?)
            show_help
            exit 0
            ;;
	j)  threads=$OPTARG
            ;;
	s)  study=$OPTARG
	    ;;
	l)  level=$OPTARG
            ;;
	n)  silent=1
            ;;
    esac
done
threads=${threads:-6}
level=${level:-0}
study=${study:-1}
silent=${silent:-0}

shift $((OPTIND-1))

printf "====== Run dirc data processing ======\n"

if [ ${level} == "0" ]; then
    cd $study
    for x in $(ls *.hld); do
	if [ ! -f "${x%.*}.hld.root" ]; then
	    hldtools -j10 -d $x
	fi
    done
    exit
fi

if [ ${level} == "1" ]; then
    cd $study
    for x in $(ls *.hld.root); do
	if [ ! -f  ${x%.*.*}"C0.root" ]; then
	    tcalibration -j10 -c ../calib/calibf_june.root -t ../calib/calibo_june.root -j10 $x
	fi
    done
    exit
fi

waitForMe (){
    while : 
    do
	activth=$(ps aux | grep "root.exe.*[p]rocData\|[p]rtdirc -[^m,^c]" | wc -l)
	printf "\r$statusline [$activth] ---- [$(($(date +%s) - start_time)) s] "
	sleep .1
	if [ "$activth" -lt "$1" ]; then 
	    break  
	fi
	sleep 1
    done
}

#datadir="/d/proc/jul18/"
datadir="$HOME/data/jul18/"

processOneSim (){
	OIFS="$IFS"
	IFS=$'\n'
	
	file=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,0)" 2>/dev/null))
	args=($(root -l -q -b $HOME/dirc/prttools/datainfo.C+"($1,3)" 2>/dev/null))
	
	IFS="$OIFS"
	
	datapath="${datadir}${1}"
	mkdir -p $datapath
	
	statusline="run study $1"
	for ((fk=1;fk<${#file[@]};fk++)); do
	    ff="${datapath}/${file[fk]}"
	    lut=$ff.lut.root
	    
	    if [ ${level} -eq "3" ]; then
		./prtdirc ${args[fk]} -r 0 -o ${ff}S.root -e 45000 -b 1  > $log.0.log && \
		    ./prtdirc  ${args[fk]} -r 1 -o $lut -a 180 -phi 0 -x "opticalphoton" -p 3.18e-09 -e 10000000  -b 1 >> $ff.1.log && \
		     cd ~/dirc/prtdirc/macro > /dev/null && root -q -b loadlib.C lutmean_cs.C"(\"$lut\")" >> $ff.1.log && cd - && \
		    ./prtdirc -r 2 -i ${ff}S.root -u u $lut.cs_avr.root -o ${ff}SR.root -e 0 -tr 1   >> $ff.2.log &
	    fi
	    if [ ${level} -eq "4" ]; then		
		./prtdirc ${args[fk]} -r 0 -o ${ff}S.root -e 4000 -seed 0 -b 1  > $ff.0.log &

	    fi
	    if [ ${level} -eq "5" ]; then
       		./prtdirc ${args[fk]} -r 1 -o $lut -a 180 -phi 0 -x "opticalphoton" -p 3.18e-09 -e 10000000  -b 1 > $ff.1.log && \
		    cd ~/dirc/prtdirc/macro > /dev/null &&  root -q -b loadlib.C lutmean_cs.C"(\"$lut\")" >> $ff.2.log && cd -  &
	    fi	 
	    
	    if [ ${level} -eq "8" ]; then
		./prtdirc ${args[fk]} -r 4 -i ${ff}S.root -u $lut.cs_avr.root -o ${ff}SR.root -f 0 -e 2000 -tr 0.5 -v 1   > $ff.2.log &
		./prtdirc ${args[fk]} -r 4 -i ${ff}C.root -u $lut.cs_avr.root -o ${ff}CR.root -f 0 -e 2000 -tr 0.5 -v 1   > $ff.3.log &
	    fi
	    if [ ${level} -eq "6" ] || [ ${level} -eq "9" ]; then
	       	./prtdirc -r 2 -i ${ff}S.root -u $lut.cs_avr.root -o ${ff}SR.root -f 0 -e 2000 -tr 0.5 -v 1 > $ff.2.log &
	    fi
	    if [ ${level} -eq "7" ] || [ ${level} -eq "9" ]; then
		./prtdirc -r 2 -i ${ff}C.root -u $lut.cs_avr.root -o ${ff}CR.root -f 0 -e 2000 -tr 0.5 -v 1   > $ff.3.log &
	    fi

	    waitForMe $threads
	done
}

start_time=$(date +%s)

cd ~/dirc/prtdirc/build > /dev/null 

processOneSim $study 

waitForMe "1"

datapath="${datadir}${study}"

if [ ${level} -eq "6" ] || [ ${level} -eq "9" ]; then
    hadd -f ${datapath}/res_${study}S.root ${datapath}/*SR.root 
fi
if [ ${level} -eq "7" ] || [ ${level} -eq "9" ]; then
    hadd -f ${datapath}/res_${study}C.root ${datapath}/*CR.root
fi

cd ~/dirc/prttools > /dev/null 
printf "\r$statusline [-] done [$(($(date +%s) - start_time)) s]     \n"

